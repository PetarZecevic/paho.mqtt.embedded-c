*** /dev/null
--- /dev/null
***************
*** 73,75
-   FP<void, MQTT::MessageData&> fp; // added
-   fp.attach(messageArrived); // added
-   rc = client.subscribe(topic, MQTT::QOS2, fp); //added   
--- 73 -----
+   rc = client.subscribe(topic, MQTT::QOS2, messageArrived);   
*** /dev/null
--- /dev/null
***************
*** 27,34
-   class-example
-   class-example.cpp
- )
- 
- target_include_directories(class-example PRIVATE "../../src" "../../src/linux")
- target_link_libraries(class-example MQTTPacketClient)
- 
- add_executable(
--- 0 -----
*** /dev/null
--- /dev/null
***************
*** 33
-     const char* hostname = "localhost";
--- 33 -----
+     const char* hostname = "iot.eclipse.org";
***************
*** 49,51
-     FP<void, MQTT::MessageData&> fp; // added
-     fp.attach(messageArrived); // added
-     rc = client.subscribe(topic, MQTT::QOS2, fp); // added  
--- 49 -----
+     rc = client.subscribe(topic, MQTT::QOS2, messageArrived);   
*** /dev/null
--- /dev/null
***************
*** 241,243
-     FP<void, MQTT::MessageData&> fp; // added
-     fp.attach(messageArrived); // added
-     rc = client.subscribe("+", MQTT::QOS2, fp); // added   
--- 241 -----
+     rc = client.subscribe("+", MQTT::QOS2, messageArrived);   
*** /dev/null
--- /dev/null
***************
*** 245,247
-     FP<void, MQTT::MessageData&> fp; // added
-     fp.attach(messageArrived); // added
- 	rc = client.subscribe(topic, opts.qos, fp); // added
--- 245 -----
+ 	rc = client.subscribe(topic, opts.qos, messageArrived);
*** /dev/null
--- /dev/null
***************
*** 13
-  * Contributors:
--- 13 -----
+  * Contributors:
***************
*** 15
-  *    Ian Craggs - added attached and detached member functions
--- 15 -----
+  *    Ian Craggs - added attached and detached member functions
***************
*** 142,149
- 	
- 	// Added overloaded constructor for class methods.
- 	template<class T>
- 	FP(T *item, retT (T::*method)(argT))
- 	{
- 		attach(item, method);
- 	}
- 	
--- 142 -----
+ 
*** /dev/null
--- /dev/null
***************
*** 117
-     typedef FP<void, MessageData&> MessageHandler;
--- 117 -----
+     typedef void (*messageHandler)(MessageData&);
***************
*** 129
-     void setDefaultMessageHandler(MessageHandler mh)
--- 129 -----
+     void setDefaultMessageHandler(messageHandler mh)
***************
*** 131,132
-         if (mh.attached())
-             defaultMessageHandler = mh;
--- 131,132 -----
+         if (mh != 0)
+             defaultMessageHandler.attach(mh);
***************
*** 134
-             defaultMessageHandler = mh;
--- 134 -----
+             defaultMessageHandler.detach();
***************
*** 141
-     int setMessageHandler(const char* topicFilter, MessageHandler mh);
--- 141 -----
+     int setMessageHandler(const char* topicFilter, messageHandler mh);
***************
*** 199
-     int subscribe(const char* topicFilter, enum QoS qos, MessageHandler mh);
--- 199 -----
+     int subscribe(const char* topicFilter, enum QoS qos, messageHandler mh);
***************
*** 208
-     int subscribe(const char* topicFilter, enum QoS qos, MessageHandler mh, subackData &data);
--- 208 -----
+     int subscribe(const char* topicFilter, enum QoS qos, messageHandler mh, subackData &data);
***************
*** 268
-         MessageHandler fp;
--- 268 -----
+         FP<void, MessageData&> fp;
***************
*** 271
-     MessageHandler defaultMessageHandler;
--- 271 -----
+     FP<void, MessageData&> defaultMessageHandler;
***************
*** 810
- int MQTT::Client<Network, Timer, MAX_MQTT_PACKET_SIZE, MAX_MESSAGE_HANDLERS>::setMessageHandler(const char* topicFilter, MessageHandler messageHandler)
--- 810 -----
+ int MQTT::Client<Network, Timer, MAX_MQTT_PACKET_SIZE, MAX_MESSAGE_HANDLERS>::setMessageHandler(const char* topicFilter, messageHandler messageHandler)
***************
*** 820
-             if (!messageHandler.attached()) // remove existing
--- 820 -----
+             if (messageHandler == 0) // remove existing
***************
*** 830
-     if (messageHandler.attached()) {
--- 830 -----
+     if (messageHandler != 0) {
***************
*** 845
-             messageHandlers[i].fp = messageHandler;
--- 845 -----
+             messageHandlers[i].fp.attach(messageHandler);
***************
*** 854
-      enum QoS qos, MessageHandler messageHandler, subackData& data)
--- 854 -----
+      enum QoS qos, messageHandler messageHandler, subackData& data)
***************
*** 892
- int MQTT::Client<Network, Timer, MAX_MQTT_PACKET_SIZE, MAX_MESSAGE_HANDLERS>::subscribe(const char* topicFilter, enum QoS qos, MessageHandler messageHandler)
--- 892 -----
+ int MQTT::Client<Network, Timer, MAX_MQTT_PACKET_SIZE, MAX_MESSAGE_HANDLERS>::subscribe(const char* topicFilter, enum QoS qos, messageHandler messageHandler)
***************
*** 921,922
-             MessageHandler empty;
-             setMessageHandler(topicFilter, empty);
--- 921 -----
+             setMessageHandler(topicFilter, 0);
*** /dev/null
--- /dev/null
***************
*** 372,374
- 	
- 	FP<void, MQTT::MessageData&> fp; // added
- 	
--- 372 -----
+ 
***************
*** 386,387
- 	fp.attach(messageArrived); // added
- 	rc = client.subscribe(test_topic, subsqos, fp); // added
--- 384 -----
+ 	rc = client.subscribe(test_topic, subsqos, messageArrived);
***************
*** 453,454
-   FP<void, MQTT::MessageData&> fp; // added
-   
--- 0 -----
***************
*** 487,488
-   fp.attach(messageArrived); // added
-   rc = client.subscribe(test_topic, subsqos, fp, suback);
--- 482 -----
+   rc = client.subscribe(test_topic, subsqos, messageArrived, suback);
***************
*** 623,625
- 	
-   FP<void, MQTT::MessageData&> fp; // added
-   
--- 617 -----
+ 
***************
*** 649
-   MQTT::subackData suback;
--- 0 -----
***************
*** 651
-   /*
--- 0 -----
***************
*** 663,664
-   fp.attach(messageArrived); // added
-   rc = client.subscribe(test_topic, subsqos, fp, suback); // added
--- 653 -----
+   rc = client.subscribe(test_topic, subsqos, messageArrived, suback);
***************
*** 670,673
-   
-   fp.detach(); // added
-   fp.attach(messageArrived2); // added
-   rc = client.subscribe(test_topic, subsqos, fp, suback); // added
--- 659,660 -----
+ 
+   rc = client.subscribe(test_topic, subsqos, messageArrived2, suback);
***************
*** 683,684
- 	
-   */
--- 670 -----
+ 
***************
*** 686
-   /*
--- 0 -----
***************
*** 699,701
-   fp.detach(); // added
-   fp.attach(messageArrived); // added
-   rc = client.subscribe(test_topic, subsqos, fp, suback); // added
--- 684 -----
+   rc = client.subscribe(test_topic, subsqos, messageArrived, suback);
***************
*** 727
-   */
--- 710 -----
+ 
***************
*** 741,743
-   fp.detach(); // added
-   fp.attach(messageArrived2); // added
-   rc = client.subscribe(test_topic, subsqos, fp, suback); // added
--- 724 -----
+   rc = client.subscribe(test_topic, subsqos, messageArrived2, suback);
***************
*** 765,767
-   fp.detach(); // added
-   fp.attach(messageArrived2); // added
-   rc = client.subscribe(test_topic, subsqos, fp, suback);
--- 746 -----
+   rc = client.subscribe(test_topic, subsqos, messageArrived2, suback);
